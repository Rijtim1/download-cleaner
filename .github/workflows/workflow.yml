name: Build and Release

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Check out the code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Build .exe with PyInstaller
      run: pyinstaller --onefile clean.py

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: clean
        path: dist/clean.exe

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: clean
        path: .

    - name: Generate tag name
      id: generate_tag
      run: echo "tag=v1.0.${{ github.run_number }}" >> $GITHUB_ENV

    - name: Generate release notes
      id: generate_notes
      uses: actions/github-script@v6
      with:
        script: |
          const { execSync } = require('child_process');
          const commits = execSync('git log --pretty=format:"* %s" -n 10').toString();
          return commits;

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.tag }}
        release_name: Release ${{ env.tag }}
        body: ${{ steps.generate_notes.outputs.result }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./clean.exe
        asset_name: clean.exe
        asset_content_type: application/octet-stream
